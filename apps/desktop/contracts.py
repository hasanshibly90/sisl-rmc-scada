# contracts.py
from typing import Protocol

class Runs(Protocol):
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def is_running(self) -> bool: ...

class HasPercent(Protocol):
    def set_percent(self, value: float) -> None: ...
    def get_percent(self) -> float: ...

class SiloLike(Runs, HasPercent, Protocol):
    def pipe_origin_scene(self): ...  # returns QPointF

class MixerLike(Runs, Protocol):
    def inlet_scene(self): ...        # returns QPointF
    def advance_phase(self, d: float = 3.0) -> None: ...
    def set_charge_progress(self, pct: float) -> None: ...
    def get_charge_progress(self) -> float: ...
    def open_gate(self) -> None: ...
    def close_gate(self) -> None: ...
    def is_gate_open(self) -> bool: ...

class ConveyorLike(Runs, Protocol):
    def tick(self) -> None: ...
